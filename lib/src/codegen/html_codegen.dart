// Copyright (c) 2015, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library ddc.src.codegen.html_codegen;

import 'dart:io';

import 'package:html5lib/dom.dart';
import 'package:html5lib/parser.dart' show parseFragment;
import 'package:path/path.dart' as path;

import 'package:dev_compiler/src/info.dart';
import 'package:dev_compiler/src/options.dart';

import 'js_codegen.dart' show jsLibraryName, jsOutputPath;

/// Emits an entry point HTML file corresponding to [inputFile] that can load
/// the code generated by the ddc compiler.
///
/// This internally transforms the given HTML [document]. When compiling to
/// JavaScript, we remove any Dart script tags, add new script tags to load the
/// ddc runtime and the compiled code, and to execute the main method of the
/// application. When compiling to Dart, we ensure that the document contains a
/// single Dart script tag, but otherwise emit the original document
/// unmodified.
void generateEntryHtml(String inputFile, CompilerOptions options,
    CheckerResults results, Document document) {
  String outputFile = path.join(options.outputDir, path.basename(inputFile));

  var scripts = document.querySelectorAll('script[type="application/dart"]');
  var mainScript = scripts[0];
  // TODO(sigmund): allow more than one Dart script tags?
  scripts.skip(1).forEach((s) => s.remove());

  if (options.outputDart) {
    new File(outputFile).writeAsStringSync('${document.outerHtml}\n');
    return;
  }

  String mainLibraryName;
  var pathToDdc = path.dirname(path
      .dirname(path.relative(Platform.script.path, from: options.outputDir)));
  var fragment = _loadRuntimeScripts(path.join(pathToDdc, 'lib'));
  if (!options.checkSdk) fragment.nodes.add(_miniMockSdk);
  for (var lib in results.libraries) {
    if (lib.isEntry) mainLibraryName = jsLibraryName(lib.library);
    fragment.nodes.add(_libraryInclude(jsOutputPath(lib)));
  }
  fragment.nodes.add(_invokeMain(mainLibraryName));
  mainScript.replaceWith(fragment);
  new File(outputFile).writeAsStringSync('${document.outerHtml}\n');
}

/// A document fragment with scripts that check for harmony features and that
/// inject our runtime.
Node _loadRuntimeScripts(String ddcLibDir) => parseFragment('''
<script src="$ddcLibDir/runtime/harmony_feature_check.js"></script>
<script src="$ddcLibDir/runtime/dart_runtime.js"></script>
''');

/// A script tag that loads the .js code for a compiled library.
Node _libraryInclude(String jsUrl) =>
    parseFragment('<script src="$jsUrl"></script>\n');

/// A script tag that invokes the main function on the entry point library.
Node _invokeMain(String mainLibraryName) =>
    parseFragment('<script>$mainLibraryName.main();</script>\n');

/// A script tag with a tiny mock of the core SDK. This is just used for testing
/// some small samples.
// TODO(sigmund,jmesserly): remove.
Node get _miniMockSdk => parseFragment('''
<script>
  /* placehorder for unimplemented code libraries */
  var math = Math;
  var core = { int: { parse: Number }, print: e => console.log(e) };
  var dom = { document: document };
</script>''');
